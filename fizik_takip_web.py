# fizik_takip_web.py
import streamlit as st
import pandas as pd
import os
import json
import hashlib
from datetime import datetime, timedelta
from io import BytesIO
import matplotlib.pyplot as plt
from fpdf import FPDF

# ---------------- Config ----------------
DATA_XLSX = "ogrenci_takip.xlsx"
USERS_JSON = "kullanicilar.json"

TYT_KONULAR = [
    "Fizik Bilimine GiriÅŸ", "Madde ve Ã–zellikleri", "SÄ±vÄ±larÄ±n KaldÄ±rma Kuvveti",
    "KatÄ± BasÄ±ncÄ±", "Durgun sÄ±vÄ± basÄ±ncÄ±", "Gaz basÄ±ncÄ±", "AkÄ±ÅŸkan basÄ±ncÄ±",
    "IsÄ±, SÄ±caklÄ±k ve GenleÅŸme", "Hareket ve Kuvvet", "Ä°ÅŸ, GÃ¼Ã§ ve Enerji",
    "Elektrostatik", "Elektrik Devreleri", "Manyetizma", "Dalgalar", "Optik"
]

AYT_KONULAR = [
    "VektÃ¶rler", "Tork ve Denge", "KÃ¼tle Merkezi", "Basit Makineler",
    "Ä°vmeli Hareket", "Newtonâ€™un Hareket YasalarÄ±", "Ä°ÅŸ, GÃ¼Ã§ ve Enerji II",
    "AtÄ±ÅŸlar", "Ä°tme ve Momentum", "Elektrik Kuvvet", "Elektrik Alan",
    "Elektriksel Potansiyel", "Elektriksel Potansiyel Enerji", "Paralel Levhalar",
    "SÄ±ÄŸa", "Manyetik Alan ve Manyetik Kuvvet", "Ä°ndÃ¼ksiyon Emk'sÄ±",
    "Alternatif AkÄ±m", "TransformatÃ¶rler", "Ã‡embersel Hareket", "AÃ§Ä±sal Momentum",
    "KÃ¼tle Ã‡ekim ve Kepler YasalarÄ±", "Basit Harmonik Hareket", "Dalga MekaniÄŸi",
    "Elektromanyetik Dalgalar", "Atom Modelleri", "BÃ¼yÃ¼k Patlama ve ParÃ§acÄ±k FiziÄŸi",
    "Radyoaktivite", "Ã–zel GÃ¶relilik", "Kara Cisim IÅŸÄ±masÄ±", "Fotoelektrik Olay",
    "Compton OlayÄ±", "Modern FiziÄŸin Teknolojideki UygulamalarÄ±"
]

# ---------------- Helpers ----------------
def sha(s: str) -> str:
    return hashlib.sha256(s.encode()).hexdigest()

def ensure_files():
    # users file with admin
    if not os.path.exists(USERS_JSON):
        admin_pw = sha("tc6j7y")
        with open(USERS_JSON, "w") as f:
            json.dump({"admin": {"sifre": admin_pw, "tip": "ogretmen"}}, f)
    # data excel with two sheets
    if not os.path.exists(DATA_XLSX):
        # empty dataframes
        calisma = pd.DataFrame(columns=["Tarih","Ã–ÄŸrenci","Ã‡alÄ±ÅŸma TÃ¼rÃ¼","Konu","Kaynak","Toplam Soru","DoÄŸru","YanlÄ±ÅŸ","BoÅŸ"])
        deneme = pd.DataFrame(columns=["Tarih","Ã–ÄŸrenci","SÄ±nav AdÄ±","Ã‡alÄ±ÅŸma TÃ¼rÃ¼","Konu","Toplam Soru","DoÄŸru","YanlÄ±ÅŸ","BoÅŸ"])
        with pd.ExcelWriter(DATA_XLSX, engine="openpyxl") as w:
            calisma.to_excel(w, sheet_name="Calisma", index=False)
            deneme.to_excel(w, sheet_name="Deneme", index=False)

def load_data():
    ensure_files()
    xls = pd.read_excel(DATA_XLSX, sheet_name=None)
    calisma = xls.get("Calisma", pd.DataFrame(columns=["Tarih","Ã–ÄŸrenci","Ã‡alÄ±ÅŸma TÃ¼rÃ¼","Konu","Kaynak","Toplam Soru","DoÄŸru","YanlÄ±ÅŸ","BoÅŸ"]))
    deneme = xls.get("Deneme", pd.DataFrame(columns=["Tarih","Ã–ÄŸrenci","SÄ±nav AdÄ±","Ã‡alÄ±ÅŸma TÃ¼rÃ¼","Konu","Toplam Soru","DoÄŸru","YanlÄ±ÅŸ","BoÅŸ"]))
    return calisma, deneme

def save_data(calisma_df, deneme_df):
    with pd.ExcelWriter(DATA_XLSX, engine="openpyxl") as w:
        calisma_df.to_excel(w, sheet_name="Calisma", index=False)
        deneme_df.to_excel(w, sheet_name="Deneme", index=False)

def load_users():
    ensure_files()
    with open(USERS_JSON, "r") as f:
        return json.load(f)

def save_users(users):
    with open(USERS_JSON, "w") as f:
        json.dump(users, f)

# ---------------- App ----------------
st.set_page_config(page_title="Fizik Takip", layout="wide")
st.title("Fizik Ders Takip Sistemi")

# initialize session
if "user" not in st.session_state:
    st.session_state["user"] = None  # dict: {"ad":..., "tip":...}

# Login / Register UI
if st.session_state["user"] is None:
    users = load_users()
    col1, col2 = st.columns([1,1])
    with col1:
        st.subheader("GiriÅŸ Yap")
        user = st.text_input("KullanÄ±cÄ± AdÄ±", key="login_user")
        pwd = st.text_input("Åžifre", type="password", key="login_pwd")
        if st.button("GiriÅŸ Yap"):
            users = load_users()
            if user in users and users[user]["sifre"] == sha(pwd):
                st.success(f"HoÅŸgeldiniz, {user}!")
                st.session_state["user"] = {"ad": user, "tip": users[user]["tip"]}
                st.experimental_rerun()
            else:
                st.error("KullanÄ±cÄ± adÄ± veya ÅŸifre hatalÄ±.")
    with col2:
        st.subheader("KayÄ±t Ol (Ã–ÄŸrenci)")
        new_user = st.text_input("KullanÄ±cÄ± AdÄ± (yeni)", key="reg_user")
        new_pwd = st.text_input("Åžifre (yeni)", type="password", key="reg_pwd")
        if st.button("KayÄ±t Ol"):
            users = load_users()
            if not new_user or not new_pwd:
                st.error("KullanÄ±cÄ± adÄ± ve ÅŸifre boÅŸ olamaz.")
            elif new_user in users:
                st.error("Bu kullanÄ±cÄ± adÄ± zaten alÄ±nmÄ±ÅŸ.")
            else:
                users[new_user] = {"sifre": sha(new_pwd), "tip": "ogrenci"}
                save_users(users)
                st.success("KayÄ±t baÅŸarÄ±lÄ±. GiriÅŸ yapabilirsiniz.")
    st.stop()

# logged in
me = st.session_state["user"]["ad"]
role = st.session_state["user"]["tip"]
left, right = st.columns([1,5])
with left:
    st.write(f"**KullanÄ±cÄ±:** {me} ({role})")
    if st.button("Ã‡Ä±kÄ±ÅŸ"):
        st.session_state["user"] = None
        st.experimental_rerun()

# load data
calisma_df, deneme_df = load_data()

# helper: get student list
all_students = sorted(list(set(calisma_df["Ã–ÄŸrenci"].dropna().tolist() + deneme_df["Ã–ÄŸrenci"].dropna().tolist() + ([] if role=="ogretmen" else [me]))))

# Menu
if role == "ogretmen":
    menu = st.sidebar.selectbox("MenÃ¼", [
        "ðŸ“Š Ã–ÄŸretmen RaporlarÄ±",
        "KayÄ±t Ekle",
        "Deneme SÄ±navÄ± Ekle",
        "HaftalÄ±k Rapor",
        "AylÄ±k Rapor",
        "Konu BazlÄ± Detay",
        "Tekrar Ã–nerisi",
        "BaÅŸarÄ± Takibi"
    ])
else:
    menu = st.sidebar.selectbox("MenÃ¼", [
        "KayÄ±t Ekle",
        "Deneme SÄ±navÄ± Ekle",
        "HaftalÄ±k Rapor",
        "AylÄ±k Rapor",
        "Konu BazlÄ± Detay",
        "Tekrar Ã–nerisi",
        "BaÅŸarÄ± Takibi"
    ])

# ---------- Ã–ÄŸretmen RaporlarÄ± (admin-only) ----------
if menu == "ðŸ“Š Ã–ÄŸretmen RaporlarÄ±":
    st.header("Ã–ÄŸretmen RaporlarÄ± (sadece Ã¶ÄŸretmen gÃ¶rÃ¼r)")
    # Filters
    col1, col2, col3 = st.columns(3)
    with col1:
        filt_tarih1 = st.date_input("BaÅŸlangÄ±Ã§", datetime.today() - timedelta(days=30))
    with col2:
        filt_tarih2 = st.date_input("BitiÅŸ", datetime.today())
    with col3:
        filt_calisma = st.selectbox("Ã‡alÄ±ÅŸma TÃ¼rÃ¼", ["Hepsi","TYT","AYT"])
    # aggregate combined
    cal = calisma_df.copy(); den = deneme_df.copy()
    cal["Tarih"] = pd.to_datetime(cal["Tarih"]); den["Tarih"] = pd.to_datetime(den["Tarih"])
    mask_cal = (cal["Tarih"]>=pd.to_datetime(filt_tarih1)) & (cal["Tarih"]<=pd.to_datetime(filt_tarih2))
    mask_den = (den["Tarih"]>=pd.to_datetime(filt_tarih1)) & (den["Tarih"]<=pd.to_datetime(filt_tarih2))
    cal_f = cal[mask_cal]
    den_f = den[mask_den]
    if filt_calisma != "Hepsi":
        cal_f = cal_f[cal_f["Ã‡alÄ±ÅŸma TÃ¼rÃ¼"]==filt_calisma]
        den_f = den_f[den_f["Ã‡alÄ±ÅŸma TÃ¼rÃ¼"]==filt_calisma]
    # summary per student
    if cal_f.empty and den_f.empty:
        st.info("SeÃ§ilen aralÄ±kta veri yok.")
    else:
        # combine by summing totals for same student & topic
        cal_agg = cal_f.groupby(["Ã–ÄŸrenci","Konu"]).agg({"Toplam Soru":"sum","DoÄŸru":"sum"}).reset_index()
        den_agg = den_f.groupby(["Ã–ÄŸrenci","Konu"]).agg({"Toplam Soru":"sum","DoÄŸru":"sum"}).reset_index()
        combined = pd.concat([cal_agg, den_agg], ignore_index=True)
        combined = combined.groupby(["Ã–ÄŸrenci","Konu"]).sum().reset_index()
        combined["BaÅŸarÄ± (%)"] = (combined["DoÄŸru"] / combined["Toplam Soru"] * 100).round(1)
        st.subheader("Ã–ÄŸrenci - Konu BazlÄ± Ã–zet")
        st.dataframe(combined)
        # download excel
        buf = BytesIO()
        with pd.ExcelWriter(buf, engine="openpyxl") as w:
            combined.to_excel(w, index=False, sheet_name="Ã–zet")
        st.download_button("Excel Ä°ndir", data=buf.getvalue(), file_name="ogretmen_ozet.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# ---------- KayÄ±t Ekle ----------
elif menu == "KayÄ±t Ekle":
    st.header("GÃ¼nlÃ¼k Ã‡alÄ±ÅŸma KaydÄ± Ekle")
    # which student: teacher can add for any student, student only themselves
    if role == "ogretmen":
        ogr = st.selectbox("Ã–ÄŸrenci", all_students)
    else:
        ogr = me
    calisma_turu = st.radio("Ã‡alÄ±ÅŸma TÃ¼rÃ¼", ["TYT","AYT"])
    konular = TYT_KONULAR if calisma_turu=="TYT" else AYT_KONULAR
    konu = st.selectbox("Konu", konular)
    kaynak = st.text_input("Kaynak (kitap/deneme/test adÄ±)")
    tarih = st.date_input("Tarih", datetime.today())
    toplam = st.number_input("Toplam Soru", min_value=0, value=0)
    dogru = st.number_input("DoÄŸru", min_value=0, value=0)
    yanlis = st.number_input("YanlÄ±ÅŸ", min_value=0, value=0)
    bos = st.number_input("BoÅŸ", min_value=0, value=0)
    if st.button("KaydÄ± Ekle"):
        if toplam != dogru + yanlis + bos:
            st.error("Toplam = DoÄŸru + YanlÄ±ÅŸ + BoÅŸ olmalÄ±!")
        else:
            calisma_df = calisma_df.append({
                "Tarih": tarih.strftime("%Y-%m-%d"),
                "Ã–ÄŸrenci": ogr,
                "Ã‡alÄ±ÅŸma TÃ¼rÃ¼": calisma_turu,
                "Konu": konu,
                "Kaynak": kaynak,
                "Toplam Soru": toplam,
                "DoÄŸru": dogru,
                "YanlÄ±ÅŸ": yanlis,
                "BoÅŸ": bos
            }, ignore_index=True)
            save_data(calisma_df, deneme_df)
            st.success("Ã‡alÄ±ÅŸma kaydedildi.")

# ---------- Deneme SÄ±navÄ± Ekle ----------
elif menu == "Deneme SÄ±navÄ± Ekle":
    st.header("Deneme SÄ±navÄ± - Konu BazlÄ± KayÄ±t")
    if role == "ogretmen":
        ogr = st.selectbox("Ã–ÄŸrenci", all_students)
    else:
        ogr = me
    sinav_adi = st.text_input("Deneme / SÄ±nav AdÄ±")
    tarih = st.date_input("Tarih", datetime.today())
    calisma_turu = st.radio("Ã‡alÄ±ÅŸma TÃ¼rÃ¼", ["TYT","AYT"])
    konular = TYT_KONULAR if calisma_turu=="TYT" else AYT_KONULAR
    secilen_konular = st.multiselect("Konular (birden fazla seÃ§ip ayrÄ± ayrÄ± gir)", konular)
    if secilen_konular:
        st.write("SeÃ§ilen konular iÃ§in verileri girip 'Deneme Kaydet' butonuna basÄ±n.")
    for konu in secilen_konular:
        st.markdown(f"**{konu}**")
        t = st.number_input(f"{konu} - Toplam", min_value=0, key=f"den_top_{konu}")
        d = st.number_input(f"{konu} - DoÄŸru", min_value=0, key=f"den_dog_{konu}")
        y = st.number_input(f"{konu} - YanlÄ±ÅŸ", min_value=0, key=f"den_yan_{konu}")
        b = st.number_input(f"{konu} - BoÅŸ", min_value=0, key=f"den_bos_{konu}")
        if st.button(f"{konu} - Deneme Kaydet"):
            if t != d + y + b:
                st.error("Toplam = DoÄŸru + YanlÄ±ÅŸ + BoÅŸ olmalÄ±!")
            else:
                deneme_df = deneme_df.append({
                    "Tarih": tarih.strftime("%Y-%m-%d"),
                    "Ã–ÄŸrenci": ogr,
                    "SÄ±nav AdÄ±": sinav_adi,
                    "Ã‡alÄ±ÅŸma TÃ¼rÃ¼": calisma_turu,
                    "Konu": konu,
                    "Toplam Soru": t,
                    "DoÄŸru": d,
                    "YanlÄ±ÅŸ": y,
                    "BoÅŸ": b
                }, ignore_index=True)
                save_data(calisma_df, deneme_df)
                st.success(f"{konu} iÃ§in deneme kaydedildi.")

# ---------- HaftalÄ±k Rapor ----------
elif menu == "HaftalÄ±k Rapor":
    st.header("HaftalÄ±k Rapor (son 7 gÃ¼n)")
    dfc, dfd = load_data()
    dfc["Tarih"] = pd.to_datetime(dfc["Tarih"])
    son = datetime.today() - timedelta(days=7)
    df_son = dfc[dfc["Tarih"] >= son]
    if role != "ogretmen":
        df_son = df_son[df_son["Ã–ÄŸrenci"]==me]
    if df_son.empty:
        st.info("Son 7 gÃ¼n iÃ§inde kayÄ±t yok.")
    else:
        rpt = df_son.groupby(["Ã–ÄŸrenci","Ã‡alÄ±ÅŸma TÃ¼rÃ¼","Konu"]).agg({"Toplam Soru":"sum","DoÄŸru":"sum","YanlÄ±ÅŸ":"sum","BoÅŸ":"sum"}).reset_index()
        rpt["DoÄŸru OranÄ± (%)"] = (rpt["DoÄŸru"]/rpt["Toplam Soru"]*100).round(1)
        st.dataframe(rpt)

# ---------- AylÄ±k Rapor ----------
elif menu == "AylÄ±k Rapor":
    st.header("Tarih AralÄ±ÄŸÄ±na GÃ¶re Rapor")
    start = st.date_input("BaÅŸlangÄ±Ã§", datetime.today() - timedelta(days=30))
    end = st.date_input("BitiÅŸ", datetime.today())
    dfc, dfd = load_data()
    dfc["Tarih"] = pd.to_datetime(dfc["Tarih"])
    mask = (dfc["Tarih"]>=pd.to_datetime(start)) & (dfc["Tarih"]<=pd.to_datetime(end))
    df_period = dfc[mask]
    if role != "ogretmen":
        df_period = df_period[df_period["Ã–ÄŸrenci"]==me]
    if df_period.empty:
        st.info("SeÃ§ilen aralÄ±kta Ã§alÄ±ÅŸma yok.")
    else:
        rpt = df_period.groupby(["Ã–ÄŸrenci","Ã‡alÄ±ÅŸma TÃ¼rÃ¼","Konu"]).agg({"Toplam Soru":"sum","DoÄŸru":"sum","YanlÄ±ÅŸ":"sum","BoÅŸ":"sum"}).reset_index()
        rpt["DoÄŸru OranÄ± (%)"] = (rpt["DoÄŸru"]/rpt["Toplam Soru"]*100).round(1)
        st.dataframe(rpt)

# ---------- Konu BazlÄ± Detay ----------
elif menu == "Konu BazlÄ± Detay":
    st.header("Konu BazlÄ± Detay")
    calisma_turu = st.radio("Ã‡alÄ±ÅŸma TÃ¼rÃ¼", ["TYT","AYT"])
    konular = TYT_KONULAR if calisma_turu=="TYT" else AYT_KONULAR
    konu = st.selectbox("Konu", konular)
    # combine both calisma and deneme for this konu
    dfc, dfd = load_data()
    dfc["Tarih"] = pd.to_datetime(dfc["Tarih"]); dfd["Tarih"] = pd.to_datetime(dfd["Tarih"])
    df_k = pd.concat([
        dfc[(dfc["Konu"]==konu) & (dfc["Ã‡alÄ±ÅŸma TÃ¼rÃ¼"]==calisma_turu)],
        dfd[(dfd["Konu"]==konu) & (dfd["Ã‡alÄ±ÅŸma TÃ¼rÃ¼"]==calisma_turu)]
    ], ignore_index=True)
    if role != "ogretmen":
        df_k = df_k[df_k["Ã–ÄŸrenci"]==me]
    if df_k.empty:
        st.info("Bu konuda kayÄ±t yok.")
    else:
        df_k["BaÅŸarÄ± (%)"] = (df_k["DoÄŸru"]/df_k["Toplam Soru"]*100).round(1)
        st.dataframe(df_k.sort_values("Tarih"))

        # plot trend per student
        for ogr in df_k["Ã–ÄŸrenci"].unique():
            df_ogr = df_k[df_k["Ã–ÄŸrenci"]==ogr].sort_values("Tarih")
            fig, ax = plt.subplots()
            ax.plot(df_ogr["Tarih"], df_ogr["BaÅŸarÄ± (%)"], marker="o")
            ax.set_title(f"{ogr} - {konu}")
            ax.set_ylim(0,100)
            st.pyplot(fig)

# ---------- Tekrar Ã–nerisi (Hafta / Deneme / Mix) ----------
elif menu == "Tekrar Ã–nerisi":
    st.header("Tekrar Ã–nerisi")
    tab1, tab2, tab3 = st.tabs(["Ã‡alÄ±ÅŸma BazlÄ± (hafta filtresi)", "Deneme BazlÄ±", "Mix (Ã‡alÄ±ÅŸma+Deneme)"])

    # common mapping
    hafta_map = {"3 hafta":21,"4 hafta":28,"5 hafta":35,"6+ hafta":42}

    with tab1:
        st.subheader("Ã‡alÄ±ÅŸma BazlÄ±")
        hafta_sec = st.selectbox("Hafta filtre", list(hafta_map.keys()), index=0, key="t1_h")
        calisma_turu = st.radio("Ã‡alÄ±ÅŸma TÃ¼rÃ¼", ["Hepsi","TYT","AYT"], key="t1_ct")
        basari_alt = st.slider("BaÅŸarÄ± alt limiti (%)", 0,100,60, key="t1_b")
        cal, den = load_data()
        cal["Tarih"] = pd.to_datetime(cal["Tarih"])
        ogr_list = [me] if role!="ogretmen" else sorted(cal["Ã–ÄŸrenci"].unique())
        rows=[]
        for ogr in ogr_list:
            for konu in (TYT_KONULAR+AYT_KONULAR):
                df_ok = cal[(cal["Ã–ÄŸrenci"]==ogr) & (cal["Konu"]==konu)]
                if df_ok.empty:
                    continue
                if calisma_turu!="Hepsi" and not (df_ok["Ã‡alÄ±ÅŸma TÃ¼rÃ¼"]==calisma_turu).any():
                    continue
                son = df_ok["Tarih"].max()
                gun = (datetime.today()-son).days
                basari = (df_ok["DoÄŸru"].sum()/df_ok["Toplam Soru"].sum()*100).round(1)
                if gun >= hafta_map[hafta_sec] or basari <= basari_alt:
                    rows.append((ogr,konu,son.strftime("%Y-%m-%d"),gun,basari))
        if rows:
            df_out = pd.DataFrame(rows, columns=["Ã–ÄŸrenci","Konu","Son Ã‡Ã¶zÃ¼m","GÃ¼n Ã–nce","BaÅŸarÄ± (%)"])
            st.dataframe(df_out)
        else:
            st.info("Tekrar Ã¶nerilecek konu yok.")

    with tab2:
        st.subheader("Deneme BazlÄ± (yanlÄ±ÅŸ+boÅŸ aÄŸÄ±rlÄ±klÄ±)")
        calisma_turu = st.radio("Ã‡alÄ±ÅŸma TÃ¼rÃ¼", ["Hepsi","TYT","AYT"], key="t2_ct")
        basari_alt = st.slider("BaÅŸarÄ± alt limiti (%)", 0,100,60, key="t2_b")
        den = load_data()[1]
        den["Tarih"] = pd.to_datetime(den["Tarih"])
        ogr_list = [me] if role!="ogretmen" else sorted(den["Ã–ÄŸrenci"].unique())
        rows=[]
        for ogr in ogr_list:
            for konu in (TYT_KONULAR+AYT_KONULAR):
                df_ok = den[(den["Ã–ÄŸrenci"]==ogr) & (den["Konu"]==konu)]
                if df_ok.empty:
                    continue
                if calisma_turu!="Hepsi" and not (df_ok["Ã‡alÄ±ÅŸma TÃ¼rÃ¼"]==calisma_turu).any():
                    continue
                total = df_ok["Toplam Soru"].sum()
                correct = df_ok["DoÄŸru"].sum()
                basari = (correct/total*100).round(1) if total>0 else 0.0
                if basari <= basari_alt:
                    last = df_ok["Tarih"].max()
                    rows.append((ogr,konu,last.strftime("%Y-%m-%d"),basari))
        if rows:
            df_out = pd.DataFrame(rows, columns=["Ã–ÄŸrenci","Konu","Son Deneme Tarihi","BaÅŸarÄ± (%)"])
            st.dataframe(df_out)
        else:
            st.info("Denemelere gÃ¶re tekrar gerektiren konu yok.")

    with tab3:
        st.subheader("Mix (Ã‡alÄ±ÅŸma + Deneme)")
        hafta_sec = st.selectbox("Hafta filtre", list(hafta_map.keys()), index=0, key="t3_h")
        calisma_turu = st.radio("Ã‡alÄ±ÅŸma TÃ¼rÃ¼", ["Hepsi","TYT","AYT"], key="t3_ct")
        basari_alt = st.slider("BaÅŸarÄ± alt limiti (%)", 0,100,60, key="t3_b")

        cal, den = load_data()
        cal["Tarih"] = pd.to_datetime(cal["Tarih"]); den["Tarih"] = pd.to_datetime(den["Tarih"])
        ogr_list = [me] if role!="ogretmen" else sorted(set(cal["Ã–ÄŸrenci"].unique()).union(set(den["Ã–ÄŸrenci"].unique())))
        rows=[]
        for ogr in ogr_list:
            for konu in (TYT_KONULAR+AYT_KONULAR):
                # Ã§alÄ±ÅŸma bazlÄ±
                df_c = cal[(cal["Ã–ÄŸrenci"]==ogr)&(cal["Konu"]==konu)]
                df_d = den[(den["Ã–ÄŸrenci"]==ogr)&(den["Konu"]==konu)]
                last_dates = []
                correct_total = 0
                total_q = 0
                if not df_c.empty:
                    last_dates.append(df_c["Tarih"].max())
                    total_q += df_c["Toplam Soru"].sum()
                    correct_total += df_c["DoÄŸru"].sum()
                if not df_d.empty:
                    last_dates.append(df_d["Tarih"].max())
                    total_q += df_d["Toplam Soru"].sum()
                    correct_total += df_d["DoÄŸru"].sum()
                if total_q==0:
                    continue
                last = max(last_dates)
                gun = (datetime.today()-last).days
                basari = (correct_total/total_q*100).round(1)
                if gun >= hafta_map[hafta_sec] or basari <= basari_alt:
                    rows.append((ogr,konu,last.strftime("%Y-%m-%d"),gun,basari))
        if rows:
            df_out = pd.DataFrame(rows, columns=["Ã–ÄŸrenci","Konu","Son Ã‡Ã¶zÃ¼m","GÃ¼n Ã–nce","BaÅŸarÄ± (%)"])
            st.dataframe(df_out)
        else:
            st.info("Mix kriterlerine gÃ¶re tekrar Ã¶nerisi yok.")

# ---------- BaÅŸarÄ± Takibi ----------
elif menu == "BaÅŸarÄ± Takibi":
    st.header("BaÅŸarÄ± Takibi (konu bazlÄ±)")
    cal, den = load_data()
    comb = pd.concat([cal[["Ã–ÄŸrenci","Ã‡alÄ±ÅŸma TÃ¼rÃ¼","Konu","Toplam Soru","DoÄŸru"]],
                      den[["Ã–ÄŸrenci","Ã‡alÄ±ÅŸma TÃ¼rÃ¼","Konu","Toplam Soru","DoÄŸru"]]], ignore_index=True)
    if role!="ogretmen":
        comb = comb[comb["Ã–ÄŸrenci"]==me]
    if comb.empty:
        st.info("HenÃ¼z veri yok.")
    else:
        rpt = comb.groupby(["Ã–ÄŸrenci","Ã‡alÄ±ÅŸma TÃ¼rÃ¼","Konu"]).sum().reset_index()
        rpt["BaÅŸarÄ± (%)"] = (rpt["DoÄŸru"]/rpt["Toplam Soru"]*100).round(1)
        st.dataframe(rpt)

# ---------------- end menu ----------------

# Save (in case other parts modified df references)
save_data(calisma_df, deneme_df)
